---
interface Props {
  title: string;
  imageUrl?: string;
}

const { title, imageUrl = "/placeholder.png" } = Astro.props;
---

<div class="column">
  <div class="column-header">
    <img src={imageUrl} alt="" class="placeholder-image" />
    <h2 class="column-title">{title}</h2>
    <div class="menu-container">
      <button class="menu-button" aria-label="Column options">â‹®</button>
      <div class="menu-dropdown">
        <button class="menu-item delete-button">Delete Column</button>
      </div>
    </div>
  </div>
  <div class="column-content">
    <slot />
  </div>
</div>

<style>
  .column {
    background-color: #ebecf0;
    border-radius: 8px;
    min-width: 300px;
    padding: 12px;
    flex: 1;
  }

  .column-header {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
  }

  .column-title {
    font-size: 18px;
    font-weight: bold;
    flex: 1;
  }

  .placeholder-image {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    object-fit: cover;
  }

  .column-content {
    height: 100%;
  }

  .menu-container {
    position: relative;
  }

  .menu-button {
    background: none;
    border: none;
    font-size: 1.2em;
    padding: 2px 8px;
    cursor: pointer;
    border-radius: 4px;
  }

  .menu-button:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  .menu-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    display: none;
    min-width: 140px;
    z-index: 100;
  }

  .menu-dropdown.show {
    display: block;
  }

  .menu-item {
    display: block;
    width: 100%;
    padding: 8px 16px;
    text-align: left;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 0.9em;
  }

  .menu-item:hover {
    background-color: #f5f5f5;
  }

  .delete-button {
    color: #dc3545;
  }

  :global(.column-content.drop-target) {
    background-color: rgba(0, 0, 0, 0.05);
    border-radius: 6px;
  }

  :global(.card.dragging) {
    opacity: 0.5;
    transform: scale(0.98);
  }
</style>

<script>
  document.querySelectorAll(".column").forEach((column) => {
    const menuButton = column.querySelector(".menu-button");
    const menuDropdown = column.querySelector(".menu-dropdown");
    const deleteButton = column.querySelector(".delete-button");

    if (menuButton && menuDropdown) {
      menuButton.addEventListener("click", (e) => {
        e.stopPropagation();
        menuDropdown.classList.toggle("show");
      });

      document.addEventListener("click", (e) => {
        if (!menuButton.contains(e.target as Node)) {
          menuDropdown.classList.remove("show");
        }
      });

      deleteButton?.addEventListener("click", (e) => {
        e.stopPropagation();
        console.log("Delete column:", column);
      });
    }
  });
</script>
